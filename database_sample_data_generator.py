from faker import Faker
from sqlalchemy import create_engine
from database_queries import DatabaseQueries


class DatabaseDataGenerator:
    def __init__(self, query: DatabaseQueries):
        """
        A class for generating sample data for a database.

        :param
            query (DatabaseQueries): An instance of the DatabaseQueries class used to interact with the database.
        """
        self.query: DatabaseQueries = query

    def generate_sample_data(self, number_of_users: int) -> None:
        self.generate_users(number_of_users)

    def generate_users(self, number_of_users: int) -> None:
        """Generates new user accounts and adds them to a database.

        :param number_of_users: The number of user accounts to generate.
        :return: None

        Description:
            This function generates new user accounts using the Faker library and adds them to a database
            using the add_new_user_to_database method of the DatabaseQueries class.

            Each new user account is assigned a random username, password, and email address generated by the Faker library.
            The number of user accounts to generate is specified by the number_of_users argument.
        """
        [self.query.add_new_user_to_database(username=Faker().user_name(),
                                             password=Faker().password(length=5),
                                             email=Faker().email()) for _ in range(number_of_users)]


if __name__ == "__main__":
    db_string = "postgresql://postgres:postgres@localhost:5432/advanced_databases"
    engine = create_engine(db_string)
    DDG = DatabaseDataGenerator(DatabaseQueries(engine))
    DDG.generate_sample_data(number_of_users=10)
